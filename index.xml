<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Big Data Time</title>
    <link>https://wasai001.github.io/</link>
    <description>Recent content on Big Data Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;Everything here is mine 2019</copyright>
    <lastBuildDate>Sun, 11 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wasai001.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction of Random Forest (RF) Algorithm</title>
      <link>https://wasai001.github.io/machine_learning/randomforest/</link>
      <pubDate>Sun, 11 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wasai001.github.io/machine_learning/randomforest/</guid>
      <description>With excellent performance on all eight metrics, calibrated boosted trees were the best learning algorithm overall. Random forests are close second, followed by uncalibrated bagged trees, calibrated SVMs, and un- calibrated neural nets.
â€‹ &amp;ndash; Rich Caruana, Alexandru Niculescu-Mizil
link: https://www.cs.cornell.edu/~caruana/ctp/ct.papers/caruana.icml06.pdf
 Definition Decision Tree is a schematic, tree-shaped diagram used to determine a course of action or show a statistical probability. Each branch of the decision tree represents a possible decision, occurrence or reaction.</description>
    </item>
    
    <item>
      <title>Python Cheatsheet</title>
      <link>https://wasai001.github.io/programming/python/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wasai001.github.io/programming/python/</guid>
      <description> Import Data Import Data from SQL Server into Pandas import pyodbc import pandas as pd conn = pyodbc.connect(&#39;Driver={SQL Server};&#39; &#39;Server=localhost;&#39; &#39;Database=DataBase;&#39; &#39;Trusted_Connection=yes;&#39;) query = &amp;quot;select * from DataBase.dbo.annual_demand&amp;quot; df = pd.read_sql(query, conn) conn.close()  EDA count null values # count by columns df.isnull().sum(axis=0) # count by rows df.isnull().sum(axis=1)  </description>
    </item>
    
    <item>
      <title>R Cheatsheet</title>
      <link>https://wasai001.github.io/programming/r/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wasai001.github.io/programming/r/</guid>
      <description>Reset R Environment # Clear environment of variables and functions rm(list = ls(all = TRUE)) # Clear environmet of packages if(is.null(sessionInfo()$otherPkgs) == FALSE)lapply(paste(&amp;quot;package:&amp;quot;, names(sessionInfo()$otherPkgs), sep=&amp;quot;&amp;quot;), detach, character.only = TRUE, unload = TRUE)  Import Data # from SQL install.packages(&amp;quot;RODBC&amp;quot;) library(RODBC) conn &amp;lt;- odbcConnect(&amp;quot;localhost&amp;quot;) Emp &amp;lt;- sqlQuery(conn,&amp;quot;select * from capstone.dbo.Emp&amp;quot;) odbcClose(conn) # from CSV all_acquired &amp;lt;- read.csv(&#39;../filesPath/finalData.csv&#39;)  EDA High Level Preview head(df,20) summary(df) str(df)  Count Null Values numNAs &amp;lt;- apply(is.</description>
    </item>
    
    <item>
      <title>SQL Cheatsheet</title>
      <link>https://wasai001.github.io/programming/sql/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wasai001.github.io/programming/sql/</guid>
      <description> Count Null Values select count(*) [Number of Null Salaries] from EmP where Salary is NULL  Draw a Sample select count(*) from Person.Person SELECT FirstName, LastName FROM Person.Person TABLESAMPLE (10 PERCENT);  </description>
    </item>
    
    <item>
      <title>Code - Remove Duplicate Files in the Folder</title>
      <link>https://wasai001.github.io/programming/remove_duplicates/</link>
      <pubDate>Sun, 21 Jul 2019 19:59:56 -0700</pubDate>
      
      <guid>https://wasai001.github.io/programming/remove_duplicates/</guid>
      <description>This code helps me remove duplicate files, ending with -copy in the folder.
import os arr = os.listdir() target = [] for i in arr: if &amp;quot;- Copy.JPG&amp;quot; in i or &amp;quot;- Copy.jpg&amp;quot; in i or &amp;quot;- Copy.heic&amp;quot; in i or &amp;quot;- Copy.BMP&amp;quot; in i or &amp;quot;- Copy.PNG&amp;quot; in i or &amp;quot;- Copy.png&amp;quot; in i: target.append(i) for t in target: os.remove(t)  </description>
    </item>
    
    <item>
      <title>about site</title>
      <link>https://wasai001.github.io/about/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wasai001.github.io/about/</guid>
      <description>Thanks for reading! this is english</description>
    </item>
    
  </channel>
</rss>