<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大数据时代 | Era of Big Data</title>
    <link>/posts/</link>
    <description>Recent content in Posts on 大数据时代 | Era of Big Data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2019 12:33:26 -0700</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>中文文章&#34;</title>
      <link>/posts/chineseposts/</link>
      <pubDate>Fri, 19 Jul 2019 12:33:26 -0700</pubDate>
      
      <guid>/posts/chineseposts/</guid>
      <description>RDD的应用</description>
    </item>
    
    <item>
      <title>English Posts List</title>
      <link>/posts/englishposts/</link>
      <pubDate>Fri, 19 Jul 2019 12:27:56 -0700</pubDate>
      
      <guid>/posts/englishposts/</guid>
      <description>my first post</description>
    </item>
    
    <item>
      <title>SparkRDD及SparkML在语义分析中的应用</title>
      <link>/posts/mymd/</link>
      <pubDate>Mon, 08 Jul 2019 15:48:56 -0700</pubDate>
      
      <guid>/posts/mymd/</guid>
      <description>以下为使用SparkRDD储存一百六十万推特用户留言。使用一百六十万数据中的98%数据训练SparkML机器学习模型库中的HashingTF + IDF + Logistic Regression模型。最终使用训练模型预测2%实验数据，并对比准确率。
Unzip the file import zipfile with zipfile.ZipFile(&amp;quot;./trainingandtestdata/training.1600000.processed.noemoticon.zip&amp;quot;, &amp;quot;r&amp;quot;) as z: z.extractall(&amp;quot;./trainingandtestdata&amp;quot;)  Load and explore the data import pandas as pd import numpy as np import matplotlib.pyplot as plt plt.style.use(&#39;fivethirtyeight&#39;) %matplotlib inline %config InlineBackend.figure_format = &#39;retina&#39; cols = [&#39;sentiment&#39;,&#39;id&#39;,&#39;date&#39;,&#39;query_string&#39;,&#39;user&#39;,&#39;text&#39;] df = pd.read_csv(&amp;quot;./trainingandtestdata/training.1600000.processed.noemoticon.csv&amp;quot;,header=None, names=cols, encoding = &#39;ISO-8859-1&#39;) # df = pd.read_csv(&amp;quot;./trainingandtestdata/training.1600000.processed.noemoticon.csv&amp;quot;,header=None, names=cols,encoding=&#39;latin-1&#39;) # above line will be different depending on where you saved your data, and your file name df.</description>
    </item>
    
    <item>
      <title>My First</title>
      <link>/posts/my-first/</link>
      <pubDate>Mon, 08 Jul 2019 15:16:33 -0700</pubDate>
      
      <guid>/posts/my-first/</guid>
      <description>Test post
I&amp;rsquo;m an inline-style link</description>
    </item>
    
    <item>
      <title>Basic HTML Elements</title>
      <link>/posts/basic-elements/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/basic-elements/</guid>
      <description>&lt;p&gt;The main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/posts/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/posts/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/posts/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>/posts/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/posts/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>